(()=>{let e;document.addEventListener("DOMContentLoaded",(async()=>{const e=document.getElementById("arm"),t=document.getElementById("cartridge");try{const n=await fetch("/.netlify/functions/calculator/data"),{arms:a,cartridges:o}=await n.json();a.forEach((t=>{const n=document.createElement("option");n.value=t.id,n.textContent=t.name,e.appendChild(n)})),o.forEach((e=>{const n=document.createElement("option");n.value=e.id,n.textContent=e.name,t.appendChild(n)}))}catch(e){console.error("Error loading data:",e)}})),document.getElementById("calcForm").addEventListener("submit",(async t=>{t.preventDefault();const n=document.getElementById("arm").value,a=document.getElementById("cartridge").value,o=document.getElementById("additionalMass").value;try{const t=await fetch("/.netlify/functions/calculator",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({armId:parseInt(n),cartridgeId:parseInt(a),additionalMass:o})}),r=document.getElementById("result");if(t.ok){const n=await t.json();r.innerHTML=`\n                <p>Resonance Frequency: ${n.resonanceFrequency} Hz</p>\n                <p>Effective Mass: ${n.effectiveMass} g</p>\n                <p>Compliance: ${n.compliance}</p>\n                <p>Evaluation: ${n.evaluation}</p>\n            `,function(e){let t;e>=0&&e<=7?t="red":e>=7.01&&e<=8?t="orange":e>=8.01&&e<=11?t="green":e>=11.01&&e<=12?t="orange":e>12.01&&(t="red"),document.getElementById("result").style.color=t}(parseFloat(n.resonanceFrequency)),function(t){const n=document.getElementById("resonanceChart"),a=n.getContext("2d");e&&e.destroy(),e=new Chart(a,{type:"bar",data:{labels:["Very Poor","Poor","Excellent","Poor","Very Poor"],datasets:[{label:"Resonance Frequency",data:[t>=0&&t<=7?t:0,t>=7.01&&t<=8?t:0,t>=8.01&&t<=11?t:0,t>=11.01&&t<=12?t:0,t>12.01?t:0],backgroundColor:["red","orange","green","orange","red"]}]},options:{responsive:!0,plugins:{legend:{display:!1},tooltip:{enabled:!0}},scales:{x:{title:{display:!0,text:"Scale"}},y:{title:{display:!0,text:"Frequency (Hz)"},min:0,max:20,ticks:{stepSize:1,font:{weight:"bold",size:12},callback:function(e){return e},color:function(e){const t=e.tick.value;return t>=0&&t<7?"red":t>=7&&t<8?"orange":t>=8&&t<=11?"green":t>11&&t<=12?"orange":t>12?"red":"black"}}}}}}),n.style.display="block"}(parseFloat(n.resonanceFrequency))}else r.innerHTML="<p>Error: Invalid input data</p>"}catch(e){console.error("Error processing calculation:",e)}}))})();
//# sourceMappingURL=bundle.js.map