{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://untitled2/./public/script.js"],"sourcesContent":["// Obsługa ładowania ramion i wkładek\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const armSelect = document.getElementById('arm');\n    const cartridgeSelect = document.getElementById('cartridge');\n\n    try {\n        // Poprawiona ścieżka do Netlify Functions\n        const response = await fetch('/.netlify/functions/calculator/data');\n        const { arms, cartridges } = await response.json();\n\n        arms.forEach(arm => {\n            const option = document.createElement('option');\n            option.value = arm.id;\n            option.textContent = arm.name;\n            armSelect.appendChild(option);\n        });\n\n        cartridges.forEach(cartridge => {\n            const option = document.createElement('option');\n            option.value = cartridge.id;\n            option.textContent = cartridge.name;\n            cartridgeSelect.appendChild(option);\n        });\n    } catch (error) {\n        console.error('Error loading data:', error);\n    }\n});\n\n// Funkcja do rysowania wykresu\nlet resonanceChart;\n\nfunction createChart(resonanceFrequency) {\n    const canvas = document.getElementById('resonanceChart');\n    const ctx = canvas.getContext('2d');\n\n    // Jeśli wykres już istnieje, usuń go przed utworzeniem nowego\n    if (resonanceChart) {\n        resonanceChart.destroy();\n    }\n\n    resonanceChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: ['Very Poor', 'Poor', 'Excellent', 'Poor', 'Very Poor'],\n            datasets: [{\n                label: 'Resonance Frequency',\n                data: [\n                    resonanceFrequency >= 0 && resonanceFrequency <= 7.0 ? resonanceFrequency : 0,\n                    resonanceFrequency >= 7.01 && resonanceFrequency <= 8.0 ? resonanceFrequency : 0,\n                    resonanceFrequency >= 8.01 && resonanceFrequency <= 11.0 ? resonanceFrequency : 0,\n                    resonanceFrequency >= 11.01 && resonanceFrequency <= 12.0 ? resonanceFrequency : 0,\n                    resonanceFrequency > 12.01 ? resonanceFrequency : 0\n                ],\n                backgroundColor: [\n                    'red',\n                    'orange',\n                    'green',\n                    'orange',\n                    'red',\n                ]\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: { display: false },\n                tooltip: { enabled: true }\n            },\n            scales: {\n                x: {\n                    title: { display: true, text: 'Scale' }\n                },\n                y: {\n                    title: { display: true, text: 'Frequency (Hz)' },\n                    min: 0,\n                    max: 20,\n                    ticks: {\n                        stepSize: 1,\n                        font: { weight: 'bold', size: 12 },\n                        callback: function(value) {\n                            return value;\n                        },\n                        color: function(context) {\n                            const value = context.tick.value;\n                            if (value >= 0 && value < 7) return 'red';\n                            if (value >= 7 && value < 8) return 'orange';\n                            if (value >= 8 && value <= 11) return 'green';\n                            if (value > 11 && value <= 12) return 'orange';\n                            if (value > 12) return 'red';\n                            return 'black';\n                        },\n                    },\n                },\n            }\n        }\n    });\n\n    // Po utworzeniu wykresu pokaż canvas\n    canvas.style.display = 'block';\n\n}\n\nfunction updateEvaluationColor(resonanceFrequency) {\n    const evaluationElement = document.getElementById('result');\n    let color;\n\n    if (resonanceFrequency >= 0 && resonanceFrequency <= 7.0) {\n        color = 'red'; // Very Poor\n    } else if (resonanceFrequency >= 7.01 && resonanceFrequency <= 8.0) {\n        color = 'orange'; // Poor\n    } else if (resonanceFrequency >= 8.01 && resonanceFrequency <= 11.0) {\n        color = 'green'; // Excellent\n    } else if (resonanceFrequency >= 11.01 && resonanceFrequency <= 12.0) {\n        color = 'orange'; // Poor\n    } else if (resonanceFrequency > 12.01) {\n        color = 'red'; // Very Poor\n    }\n\n    // Zmień kolor tekstu\n    evaluationElement.style.color = color;\n}\n\n// Obsługa formularza i wyświetlanie wyniku\ndocument.getElementById('calcForm').addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    const arm = document.getElementById('arm').value;\n    const cartridge = document.getElementById('cartridge').value;\n    const additionalMass = document.getElementById('additionalMass').value;\n\n    try {\n        // Poprawiona ścieżka do Netlify Functions\n        const response = await fetch('/.netlify/functions/calculator', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ armId: parseInt(arm), cartridgeId: parseInt(cartridge), additionalMass })\n        });\n\n        const resultDiv = document.getElementById('result');\n        if (response.ok) {\n            const data = await response.json();\n            resultDiv.innerHTML = `\n                <p>Resonance Frequency: ${data.resonanceFrequency} Hz</p>\n                <p>Effective Mass: ${data.effectiveMass} g</p>\n                <p>Compliance: ${data.compliance}</p>\n                <p>Evaluation: ${data.evaluation}</p>\n            `;\n\n            // Zmień kolor oceny\n            updateEvaluationColor(parseFloat(data.resonanceFrequency));\n\n            // Rysowanie wykresu na podstawie wyniku\n            createChart(parseFloat(data.resonanceFrequency));\n        } else {\n            resultDiv.innerHTML = `<p>Error: Invalid input data</p>`;\n        }\n    } catch (error) {\n        console.error('Error processing calculation:', error);\n    }\n});"],"names":["resonanceChart","document","addEventListener","async","armSelect","getElementById","cartridgeSelect","response","fetch","arms","cartridges","json","forEach","arm","option","createElement","value","id","textContent","name","appendChild","cartridge","error","console","e","preventDefault","additionalMass","method","headers","body","JSON","stringify","armId","parseInt","cartridgeId","resultDiv","ok","data","innerHTML","resonanceFrequency","effectiveMass","compliance","evaluation","color","style","updateEvaluationColor","parseFloat","canvas","ctx","getContext","destroy","Chart","type","labels","datasets","label","backgroundColor","options","responsive","plugins","legend","display","tooltip","enabled","scales","x","title","text","y","min","max","ticks","stepSize","font","weight","size","callback","context","tick","createChart"],"sourceRoot":""}